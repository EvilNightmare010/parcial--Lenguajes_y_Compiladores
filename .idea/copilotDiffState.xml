<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
<<<<<<< HEAD
=======
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.trabajo&lt;/groupId&gt;&#10;    &lt;artifactId&gt;parcial&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;21&lt;/java.version&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starter Web --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Starter Data JPA --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- H2 Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.224&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Lombok --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;version&gt;1.18.32&lt;/version&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Starter Test (opcional para pruebas) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Security --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.trabajo&lt;/groupId&gt;&#10;    &lt;artifactId&gt;parcial&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;21&lt;/java.version&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot Starter Web --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Starter Data JPA --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- H2 Database --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.224&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Lombok: Permite generar automáticamente getters, setters y otros métodos para reducir el código repetitivo en las entidades --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;version&gt;1.18.32&lt;/version&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Boot Starter Test: Incluye dependencias para pruebas unitarias y de integración en Spring Boot --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Spring Security: Proporciona seguridad y autenticación para la aplicación --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/ParcialApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/ParcialApplication.java" />
              <option name="originalContent" value="package com.trabajo.parcial;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class ParcialApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(ParcialApplication.class, args);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;// Clase principal que arranca la aplicación Spring Boot&#10;@SpringBootApplication // Indica que esta es una aplicación Spring Boot&#10;public class ParcialApplication {&#10;    // Método main: punto de entrada de la aplicación&#10;    public static void main(String[] args) {&#10;        // Inicia la aplicación Spring Boot&#10;        SpringApplication.run(ParcialApplication.class, args);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
>>>>>>> 9c2940cace0ccc1995eb759a7180430d698bcd81
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/config/SecurityConfig.java" />
              <option name="originalContent" value="package com.trabajo.parcial.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.core.userdetails.User;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.provisioning.InMemoryUserDetailsManager;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;&#10;@Configuration&#10;&#10;// Clase que configura la seguridad de la aplicación&#10;public class SecurityConfig {&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        http&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/h2-console/**&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;            )&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            .headers(headers -&gt; headers.disable())&#10;            .httpBasic(httpBasic -&gt; {});&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    // Configuración de usuario en memoria para autenticación básica&#10;    @Bean&#10;    public UserDetailsService userDetailsService(PasswordEncoder passwordEncoder) {&#10;        UserDetails user = User.builder()&#10;            .username(&quot;EIA&quot;) // Nombre de usuario&#10;            .password(passwordEncoder.encode(&quot;EIA&quot;)) // Contraseña&#10;            .roles(&quot;USER&quot;) // Rol del usuario&#10;            .build(); // Construye el usuario con los detalles especificados&#10;        return new InMemoryUserDetailsManager(user);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.core.userdetails.User;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.provisioning.InMemoryUserDetailsManager;&#10;import org.springframework.security.web.SecurityFilterChain;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;&#10;@Configuration&#10;&#10;// Clase que configura la seguridad de la aplicación&#10;public class SecurityConfig {&#10;    @Bean&#10;    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {&#10;        // Configura la seguridad HTTP para la aplicación&#10;        http&#10;            // Permite el acceso libre a la consola H2 y requiere autenticación para el resto&#10;            .authorizeHttpRequests(auth -&gt; auth&#10;                .requestMatchers(&quot;/h2-console/**&quot;).permitAll() // Permite acceso sin autenticación a la consola H2&#10;                .anyRequest().authenticated() // Requiere autenticación para cualquier otro endpoint&#10;            )&#10;            // Desactiva la protección CSRF (necesario para H2 y APIs REST)&#10;            .csrf(csrf -&gt; csrf.disable())&#10;            // Desactiva los headers de seguridad para permitir el uso de frames (necesario para H2)&#10;            .headers(headers -&gt; headers.disable())&#10;            // Habilita autenticación HTTP Basic&#10;            .httpBasic(httpBasic -&gt; {});&#10;        return http.build();&#10;    }&#10;&#10;    @Bean&#10;    public PasswordEncoder passwordEncoder() {&#10;        // Codificador seguro para contraseñas&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;&#10;    // Configura un usuario en memoria para autenticación básica&#10;    @Bean&#10;    public UserDetailsService userDetailsService(PasswordEncoder passwordEncoder) {&#10;        UserDetails user = User.builder()&#10;            .username(&quot;EIA&quot;) // Usuario para acceder a la API&#10;            .password(passwordEncoder.encode(&quot;EIA&quot;)) // Contraseña codificada&#10;            .roles(&quot;USER&quot;) // Rol asignado&#10;            .build(); // Construye el usuario con los detalles especificados&#10;        return new InMemoryUserDetailsManager(user);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
<<<<<<< HEAD
=======
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/AcosadorController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/AcosadorController.java" />
              <option name="originalContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Acosador;&#10;import com.trabajo.parcial.service.AcosadorService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/acosadores&quot;)&#10;public class AcosadorController {&#10;    private final AcosadorService acosadorService;&#10;&#10;    public AcosadorController(AcosadorService acosadorService) {&#10;        this.acosadorService = acosadorService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Acosador&gt; getAll() {&#10;        return acosadorService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Acosador&gt; getById(@PathVariable Long id) {&#10;        return acosadorService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Acosador create(@RequestBody Acosador acosador) {&#10;        return acosadorService.save(acosador);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Acosador update(@PathVariable Long id, @RequestBody Acosador acosador) {&#10;        acosador.setId(id);&#10;        return acosadorService.save(acosador);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        acosadorService.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Acosador;&#10;import com.trabajo.parcial.service.AcosadorService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/acosadores&quot;)&#10;public class AcosadorController {&#10;    private final AcosadorService acosadorService;&#10;&#10;    public AcosadorController(AcosadorService acosadorService) {&#10;        this.acosadorService = acosadorService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Acosador&gt; getAll() {&#10;        return acosadorService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Acosador&gt; getById(@PathVariable Long id) {&#10;        return acosadorService.findById(id);&#10;    }&#10;&#10;    // Crea un nuevo acosador&#10;    @PostMapping&#10;    public Acosador create(@RequestBody Acosador acosador) {&#10;        return acosadorService.save(acosador);&#10;    }&#10;&#10;    // Actualiza un acosador existente por su id&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Acosador update(@PathVariable Long id, @RequestBody Acosador acosador) {&#10;        acosador.setId(id); // Asigna el id recibido al objeto para actualizar el registro correcto&#10;        return acosadorService.save(acosador);&#10;    }&#10;&#10;    // Elimina un acosador por su id&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        acosadorService.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/CliqueController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/CliqueController.java" />
              <option name="originalContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Clique;&#10;import com.trabajo.parcial.service.CliqueService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/cliques&quot;)&#10;public class CliqueController {&#10;    private final CliqueService cliqueService;&#10;&#10;    public CliqueController(CliqueService cliqueService) {&#10;        this.cliqueService = cliqueService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Clique&gt; getAll() {&#10;        return cliqueService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Clique&gt; getById(@PathVariable Long id) {&#10;        return cliqueService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Clique create(@RequestBody Clique clique) {&#10;        return cliqueService.save(clique);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Clique update(@PathVariable Long id, @RequestBody Clique clique) {&#10;        clique.setId(id);&#10;        return cliqueService.save(clique);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        cliqueService.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Clique;&#10;import com.trabajo.parcial.service.CliqueService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/cliques&quot;)&#10;public class CliqueController {&#10;    private final CliqueService cliqueService;&#10;&#10;    public CliqueController(CliqueService cliqueService) {&#10;        this.cliqueService = cliqueService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Clique&gt; getAll() {&#10;        return cliqueService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Clique&gt; getById(@PathVariable Long id) {&#10;        return cliqueService.findById(id);&#10;    }&#10;&#10;    // Crea una nueva camarilla&#10;    @PostMapping&#10;    public Clique create(@RequestBody Clique clique) {&#10;        return cliqueService.save(clique);&#10;    }&#10;&#10;    // Actualiza una camarilla existente por su id&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Clique update(@PathVariable Long id, @RequestBody Clique clique) {&#10;        clique.setId(id); // Asigna el id recibido al objeto para actualizar el registro correcto&#10;        return cliqueService.save(clique);&#10;    }&#10;&#10;    // Elimina una camarilla por su id&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        cliqueService.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/ComercianteController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/ComercianteController.java" />
              <option name="originalContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Comerciante;&#10;import com.trabajo.parcial.service.ComercianteService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/comerciantes&quot;)&#10;public class ComercianteController {&#10;    private final ComercianteService comercianteService;&#10;&#10;    public ComercianteController(ComercianteService comercianteService) {&#10;        this.comercianteService = comercianteService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Comerciante&gt; getAll() {&#10;        return comercianteService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Comerciante&gt; getById(@PathVariable Long id) {&#10;        return comercianteService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Comerciante create(@RequestBody Comerciante comerciante) {&#10;        return comercianteService.save(comerciante);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Comerciante update(@PathVariable Long id, @RequestBody Comerciante comerciante) {&#10;        comerciante.setId(id);&#10;        return comercianteService.save(comerciante);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        comercianteService.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Comerciante;&#10;import com.trabajo.parcial.service.ComercianteService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/comerciantes&quot;)&#10;public class ComercianteController {&#10;    private final ComercianteService comercianteService;&#10;&#10;    public ComercianteController(ComercianteService comercianteService) {&#10;        this.comercianteService = comercianteService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Comerciante&gt; getAll() {&#10;        return comercianteService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Comerciante&gt; getById(@PathVariable Long id) {&#10;        return comercianteService.findById(id);&#10;    }&#10;&#10;    // Crea un nuevo comerciante&#10;    @PostMapping&#10;    public Comerciante create(@RequestBody Comerciante comerciante) {&#10;        return comercianteService.save(comerciante);&#10;    }&#10;&#10;    // Actualiza un comerciante existente por su id&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Comerciante update(@PathVariable Long id, @RequestBody Comerciante comerciante) {&#10;        comerciante.setId(id); // Asigna el id recibido al objeto para actualizar el registro correcto&#10;        return comercianteService.save(comerciante);&#10;    }&#10;&#10;    // Elimina un comerciante por su id&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        comercianteService.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/MonitorEstadoAnimoController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/MonitorEstadoAnimoController.java" />
              <option name="originalContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.MonitorEstadoAnimo;&#10;import com.trabajo.parcial.service.MonitorEstadoAnimoService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/monitor-estado-animo&quot;)&#10;public class MonitorEstadoAnimoController {&#10;    private final MonitorEstadoAnimoService monitorEstadoAnimoService;&#10;&#10;    public MonitorEstadoAnimoController(MonitorEstadoAnimoService monitorEstadoAnimoService) {&#10;        this.monitorEstadoAnimoService = monitorEstadoAnimoService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;MonitorEstadoAnimo&gt; getAll() {&#10;        return monitorEstadoAnimoService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;MonitorEstadoAnimo&gt; getById(@PathVariable Long id) {&#10;        return monitorEstadoAnimoService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public MonitorEstadoAnimo create(@RequestBody MonitorEstadoAnimo monitorEstadoAnimo) {&#10;        return monitorEstadoAnimoService.save(monitorEstadoAnimo);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public MonitorEstadoAnimo update(@PathVariable Long id, @RequestBody MonitorEstadoAnimo monitorEstadoAnimo) {&#10;        monitorEstadoAnimo.setId(id);&#10;        return monitorEstadoAnimoService.save(monitorEstadoAnimo);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        monitorEstadoAnimoService.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.MonitorEstadoAnimo;&#10;import com.trabajo.parcial.service.MonitorEstadoAnimoService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/monitor-estado-animo&quot;)&#10;public class MonitorEstadoAnimoController {&#10;    private final MonitorEstadoAnimoService monitorEstadoAnimoService;&#10;&#10;    public MonitorEstadoAnimoController(MonitorEstadoAnimoService monitorEstadoAnimoService) {&#10;        this.monitorEstadoAnimoService = monitorEstadoAnimoService;&#10;    }&#10;&#10;    // Obtiene todos los registros de estado de ánimo&#10;    @GetMapping&#10;    public List&lt;MonitorEstadoAnimo&gt; getAll() {&#10;        return monitorEstadoAnimoService.findAll();&#10;    }&#10;&#10;    // Obtiene un registro de estado de ánimo por su id&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;MonitorEstadoAnimo&gt; getById(@PathVariable Long id) {&#10;        return monitorEstadoAnimoService.findById(id);&#10;    }&#10;&#10;    // Crea un nuevo registro de estado de ánimo&#10;    @PostMapping&#10;    public MonitorEstadoAnimo create(@RequestBody MonitorEstadoAnimo monitorEstadoAnimo) {&#10;        return monitorEstadoAnimoService.save(monitorEstadoAnimo);&#10;    }&#10;&#10;    // Actualiza un registro de estado de ánimo existente por su id&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public MonitorEstadoAnimo update(@PathVariable Long id, @RequestBody MonitorEstadoAnimo monitorEstadoAnimo) {&#10;        monitorEstadoAnimo.setId(id); // Asigna el id recibido al objeto para actualizar el registro correcto&#10;        return monitorEstadoAnimoService.save(monitorEstadoAnimo);&#10;    }&#10;&#10;    // Elimina un registro de estado de ánimo por su id&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        monitorEstadoAnimoService.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/MultimediaController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/MultimediaController.java" />
              <option name="originalContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Multimedia;&#10;import com.trabajo.parcial.service.MultimediaService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/multimedia&quot;)&#10;public class MultimediaController {&#10;    private final MultimediaService multimediaService;&#10;&#10;    public MultimediaController(MultimediaService multimediaService) {&#10;        this.multimediaService = multimediaService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;Multimedia&gt; getAll() {&#10;        return multimediaService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Multimedia&gt; getById(@PathVariable Long id) {&#10;        return multimediaService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Multimedia create(@RequestBody Multimedia multimedia) {&#10;        return multimediaService.save(multimedia);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Multimedia update(@PathVariable Long id, @RequestBody Multimedia multimedia) {&#10;        multimedia.setId(id);&#10;        return multimediaService.save(multimedia);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        multimediaService.deleteById(id);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.Multimedia;&#10;import com.trabajo.parcial.service.MultimediaService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/multimedia&quot;)&#10;public class MultimediaController {&#10;    private final MultimediaService multimediaService;&#10;&#10;    public MultimediaController(MultimediaService multimediaService) {&#10;        this.multimediaService = multimediaService;&#10;    }&#10;&#10;    // Obtiene todos los registros multimedia&#10;    @GetMapping&#10;    public List&lt;Multimedia&gt; getAll() {&#10;        return multimediaService.findAll();&#10;    }&#10;&#10;    // Obtiene un registro multimedia por su id&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;Multimedia&gt; getById(@PathVariable Long id) {&#10;        return multimediaService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public Multimedia create(@RequestBody Multimedia multimedia) {&#10;        return multimediaService.save(multimedia);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Multimedia update(@PathVariable Long id, @RequestBody Multimedia multimedia) {&#10;        multimedia.setId(id);&#10;        return multimediaService.save(multimedia);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        multimediaService.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/PlanVenganzaController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/controller/PlanVenganzaController.java" />
              <option name="originalContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.PlanVenganza;&#10;import com.trabajo.parcial.service.PlanVenganzaService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/planes-venganza&quot;)&#10;public class PlanVenganzaController {&#10;    private final PlanVenganzaService planVenganzaService;&#10;&#10;    public PlanVenganzaController(PlanVenganzaService planVenganzaService) {&#10;        this.planVenganzaService = planVenganzaService;&#10;    }&#10;&#10;    @GetMapping&#10;    public List&lt;PlanVenganza&gt; getAll() {&#10;        return planVenganzaService.findAll();&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;PlanVenganza&gt; getById(@PathVariable Long id) {&#10;        return planVenganzaService.findById(id);&#10;    }&#10;&#10;    @PostMapping&#10;    public PlanVenganza create(@RequestBody PlanVenganza planVenganza) {&#10;        return planVenganzaService.save(planVenganza);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public PlanVenganza update(@PathVariable Long id, @RequestBody PlanVenganza planVenganza) {&#10;        planVenganza.setId(id);&#10;        return planVenganzaService.save(planVenganza);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        planVenganzaService.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.controller;&#10;&#10;import com.trabajo.parcial.model.PlanVenganza;&#10;import com.trabajo.parcial.service.PlanVenganzaService;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/planes-venganza&quot;)&#10;public class PlanVenganzaController {&#10;    private final PlanVenganzaService planVenganzaService;&#10;&#10;    public PlanVenganzaController(PlanVenganzaService planVenganzaService) {&#10;        this.planVenganzaService = planVenganzaService;&#10;    }&#10;&#10;    // Obtiene todos los planes de venganza&#10;    @GetMapping&#10;    public List&lt;PlanVenganza&gt; getAll() {&#10;        return planVenganzaService.findAll();&#10;    }&#10;&#10;    // Obtiene un plan de venganza por su id&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Optional&lt;PlanVenganza&gt; getById(@PathVariable Long id) {&#10;        return planVenganzaService.findById(id);&#10;    }&#10;&#10;    // Crea un nuevo plan de venganza&#10;    @PostMapping&#10;    public PlanVenganza create(@RequestBody PlanVenganza planVenganza) {&#10;        return planVenganzaService.save(planVenganza);&#10;    }&#10;&#10;    // Actualiza un plan de venganza existente por su id&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public PlanVenganza update(@PathVariable Long id, @RequestBody PlanVenganza planVenganza) {&#10;        planVenganza.setId(id); // Asigna el id recibido al objeto para actualizar el registro correcto&#10;        return planVenganzaService.save(planVenganza);&#10;    }&#10;&#10;    // Elimina un plan de venganza por su id&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public void delete(@PathVariable Long id) {&#10;        planVenganzaService.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
>>>>>>> 9c2940cace0ccc1995eb759a7180430d698bcd81
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Acosador.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Acosador.java" />
              <option name="originalContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Acosador {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    private String nombre;&#10;    private String apodo;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private HighSchoolRole highSchoolRole;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;clique_id&quot;)&#10;    private Clique grupo;&#10;&#10;    private String bullyingReason;&#10;    private int levelOfAnnoyance;&#10;&#10;    @OneToMany(mappedBy = &quot;acosador&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;PlanVenganza&gt; planesVenganza;&#10;&#10;    public enum HighSchoolRole {&#10;        JOCK, GOSSIP, NERD_HATER, TEACHER_PET, OTRO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Acosador {&#10;    // Identificador único del acosador&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Nombre real del acosador&#10;    private String nombre;&#10;    // Apodo del acosador en el instituto&#10;    private String apodo;&#10;&#10;    // Rol que tenía el acosador en el instituto&#10;    @Enumerated(EnumType.STRING)&#10;    private HighSchoolRole highSchoolRole;&#10;&#10;    // Grupo o camarilla al que pertenece el acosador&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;grupo_id&quot;)&#10;    private Clique grupo;&#10;&#10;    // Motivo del bullying&#10;    private String bullyingReason;&#10;    // Nivel de molestia causado (1-10)&#10;    private int levelOfAnnoyance;&#10;&#10;    // Lista de planes de venganza asociados a este acosador&#10;    @OneToMany(mappedBy = &quot;acosador&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;PlanVenganza&gt; planesVenganza;&#10;&#10;    // Enumeración de roles típicos en el instituto&#10;    public enum HighSchoolRole {&#10;        JOCK, GOSSIP, NERD_HATER, TEACHER_PET, OTRO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Clique.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Clique.java" />
              <option name="originalContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Clique {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    private String nombre;&#10;    private String descripcion;&#10;&#10;    @OneToMany(mappedBy = &quot;grupo&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Acosador&gt; acosadores;&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Clique {&#10;    // Identificador único de la camarilla&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Nombre de la camarilla o grupo&#10;    private String nombre;&#10;    // Descripción de la camarilla&#10;    private String descripcion;&#10;&#10;    @OneToMany(mappedBy = &quot;grupo&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Acosador&gt; acosadores;&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Comerciante.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Comerciante.java" />
              <option name="originalContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Comerciante {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;plan_venganza_id&quot;)&#10;    private PlanVenganza planVenganza;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private Tipo tipo;&#10;&#10;    private String url;&#10;    private String titulo;&#10;&#10;    public enum Tipo {&#10;        FOTO, DIBUJO, MEME, VIDEO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Comerciante {&#10;    // Identificador único del comerciante&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Plan de venganza asociado a este comerciante&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;plan_venganza_id&quot;)&#10;    private PlanVenganza planVenganza;&#10;&#10;    // Tipo de contenido multimedia que comercia&#10;    @Enumerated(EnumType.STRING)&#10;    private Tipo tipo;&#10;&#10;    // URL del recurso multimedia&#10;    private String url;&#10;    // Título o descripción del recurso&#10;    private String titulo;&#10;&#10;    // Tipos posibles de contenido multimedia&#10;    public enum Tipo {&#10;        FOTO, DIBUJO, MEME, VIDEO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/MonitorEstadoAnimo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/MonitorEstadoAnimo.java" />
              <option name="originalContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class MonitorEstadoAnimo {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    private LocalDate fecha;&#10;    private int nivelDeMood;&#10;    private String nota;&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.time.LocalDate;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class MonitorEstadoAnimo {&#10;    // Identificador único del registro de estado de ánimo&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Fecha en la que se registra el estado de ánimo&#10;    private LocalDate fecha;&#10;    // Nivel de estado de ánimo (1-10)&#10;    private int nivelDeMood;&#10;    // Nota o reflexión escrita por el usuario&#10;    private String nota;&#10;&#10;    // Permite actualizar el id del registro&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Multimedia.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/Multimedia.java" />
              <option name="originalContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Multimedia {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;plan_venganza_id&quot;)&#10;    private PlanVenganza planVenganza;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private Tipo tipo;&#10;&#10;    private String url;&#10;    private String titulo;&#10;&#10;    public enum Tipo {&#10;        FOTO, DIBUJO, MEME, VIDEO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class Multimedia {&#10;    // Identificador único del registro multimedia&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    // Plan de venganza al que está asociado este registro multimedia&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;plan_venganza_id&quot;)&#10;    private PlanVenganza planVenganza;&#10;&#10;    // Tipo de multimedia (foto, dibujo, meme, video)&#10;    @Enumerated(EnumType.STRING)&#10;    private Tipo tipo;&#10;&#10;    // URL del recurso multimedia&#10;    private String url;&#10;    // Título o descripción del recurso&#10;    private String titulo;&#10;&#10;    // Tipos posibles de multimedia&#10;    public enum Tipo {&#10;        FOTO, DIBUJO, MEME, VIDEO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/PlanVenganza.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/model/PlanVenganza.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.trabajo.parcial.model;&#10;&#10;import jakarta.persistence.*;&#10;import lombok.*;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;public class PlanVenganza {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    private String titulo;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String descripcion;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;acosador_id&quot;)&#10;    private Acosador acosador;&#10;&#10;    private boolean seEjecuta;&#10;    private LocalDate fechaPlanificada;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private NivelExito nivelExito;&#10;&#10;    @OneToMany(mappedBy = &quot;planVenganza&quot;, cascade = CascadeType.ALL)&#10;    private List&lt;Multimedia&gt; multimedia;&#10;&#10;    public enum NivelExito {&#10;        FALLO_EPICO, LIGERO_DIVERTIDO, ICONICO&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/AcosadorRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/AcosadorRepository.java" />
              <option name="originalContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Acosador;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface AcosadorRepository extends JpaRepository&lt;Acosador, Long&gt; {&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Acosador;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;// Repositorio JPA para la entidad Acosador&#10;// Permite realizar operaciones CRUD y consultas sobre la tabla de acosadores&#10;public interface AcosadorRepository extends JpaRepository&lt;Acosador, Long&gt; {&#10;    // Puedes agregar métodos personalizados aquí si necesitas consultas específicas&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/CliqueRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/CliqueRepository.java" />
              <option name="originalContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Clique;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface CliqueRepository extends JpaRepository&lt;Clique, Long&gt; {&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Clique;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;// Repositorio JPA para la entidad Clique&#10;// Permite realizar operaciones CRUD y consultas sobre la tabla de camarillas&#10;public interface CliqueRepository extends JpaRepository&lt;Clique, Long&gt; {&#10;    // Puedes agregar métodos personalizados aquí si necesitas consultas específicas&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/ComercianteRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/ComercianteRepository.java" />
              <option name="originalContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Comerciante;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface ComercianteRepository extends JpaRepository&lt;Comerciante, Long&gt; {&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Comerciante;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;// Repositorio JPA para la entidad Comerciante&#10;// Permite realizar operaciones CRUD y consultas sobre la tabla de comerciantes&#10;public interface ComercianteRepository extends JpaRepository&lt;Comerciante, Long&gt; {&#10;    // Puedes agregar métodos personalizados aquí si necesitas consultas específicas&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/MonitorEstadoAnimoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/MonitorEstadoAnimoRepository.java" />
              <option name="originalContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.MonitorEstadoAnimo;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface MonitorEstadoAnimoRepository extends JpaRepository&lt;MonitorEstadoAnimo, Long&gt; {&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.MonitorEstadoAnimo;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;// Repositorio JPA para la entidad MonitorEstadoAnimo&#10;// Permite realizar operaciones CRUD y consultas sobre la tabla de registros de estado de ánimo&#10;public interface MonitorEstadoAnimoRepository extends JpaRepository&lt;MonitorEstadoAnimo, Long&gt; {&#10;    // Puedes agregar métodos personalizados aquí si necesitas consultas específicas&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/MultimediaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/MultimediaRepository.java" />
              <option name="originalContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Multimedia;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface MultimediaRepository extends JpaRepository&lt;Multimedia, Long&gt; {&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.Multimedia;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;// Repositorio JPA para la entidad Multimedia&#10;// Permite realizar operaciones CRUD y consultas sobre la tabla de registros multimedia&#10;public interface MultimediaRepository extends JpaRepository&lt;Multimedia, Long&gt; {&#10;    // Puedes agregar métodos personalizados aquí si necesitas consultas específicas&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/PlanVenganzaRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/repository/PlanVenganzaRepository.java" />
              <option name="originalContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.PlanVenganza;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;public interface PlanVenganzaRepository extends JpaRepository&lt;PlanVenganza, Long&gt; {&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.repository;&#10;&#10;import com.trabajo.parcial.model.PlanVenganza;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;// Repositorio JPA para la entidad PlanVenganza&#10;// Permite realizar operaciones CRUD y consultas sobre la tabla de planes de venganza&#10;public interface PlanVenganzaRepository extends JpaRepository&lt;PlanVenganza, Long&gt; {&#10;    // Puedes agregar métodos personalizados aquí si necesitas consultas específicas&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/AcosadorService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/AcosadorService.java" />
              <option name="originalContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Acosador;&#10;import com.trabajo.parcial.repository.AcosadorRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class AcosadorService {&#10;    private final AcosadorRepository acosadorRepository;&#10;&#10;    public AcosadorService(AcosadorRepository acosadorRepository) {&#10;        this.acosadorRepository = acosadorRepository;&#10;    }&#10;&#10;    public List&lt;Acosador&gt; findAll() {&#10;        return acosadorRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;Acosador&gt; findById(Long id) {&#10;        return acosadorRepository.findById(id);&#10;    }&#10;&#10;    public Acosador save(Acosador acosador) {&#10;        return acosadorRepository.save(acosador);&#10;    }&#10;&#10;    public void deleteById(Long id) {&#10;        acosadorRepository.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Acosador;&#10;import com.trabajo.parcial.repository.AcosadorRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;// Servicio para la gestión de Acosadores&#10;@Service&#10;public class AcosadorService {&#10;    // Repositorio JPA para acceder a los datos de Acosador&#10;    private final AcosadorRepository acosadorRepository;&#10;&#10;    // Constructor con inyección de dependencias&#10;    public AcosadorService(AcosadorRepository acosadorRepository) {&#10;        this.acosadorRepository = acosadorRepository;&#10;    }&#10;&#10;    // Obtiene todos los acosadores registrados&#10;    public List&lt;Acosador&gt; findAll() {&#10;        return acosadorRepository.findAll();&#10;    }&#10;&#10;    // Busca un acosador por su id&#10;    public Optional&lt;Acosador&gt; findById(Long id) {&#10;        return acosadorRepository.findById(id);&#10;    }&#10;&#10;    // Guarda o actualiza un acosador&#10;    public Acosador save(Acosador acosador) {&#10;        return acosadorRepository.save(acosador);&#10;    }&#10;&#10;    // Elimina un acosador por su id&#10;    public void deleteById(Long id) {&#10;        acosadorRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/CliqueService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/CliqueService.java" />
              <option name="originalContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Clique;&#10;import com.trabajo.parcial.repository.CliqueRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class CliqueService {&#10;    private final CliqueRepository cliqueRepository;&#10;&#10;    public CliqueService(CliqueRepository cliqueRepository) {&#10;        this.cliqueRepository = cliqueRepository;&#10;    }&#10;&#10;    public List&lt;Clique&gt; findAll() {&#10;        return cliqueRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;Clique&gt; findById(Long id) {&#10;        return cliqueRepository.findById(id);&#10;    }&#10;&#10;    public Clique save(Clique clique) {&#10;        return cliqueRepository.save(clique);&#10;    }&#10;&#10;    public void deleteById(Long id) {&#10;        cliqueRepository.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Clique;&#10;import com.trabajo.parcial.repository.CliqueRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;// Servicio para la gestión de camarillas (Clique)&#10;@Service&#10;public class CliqueService {&#10;    // Repositorio JPA para acceder a los datos de Clique&#10;    private final CliqueRepository cliqueRepository;&#10;&#10;    // Constructor con inyección de dependencias&#10;    public CliqueService(CliqueRepository cliqueRepository) {&#10;        this.cliqueRepository = cliqueRepository;&#10;    }&#10;&#10;    // Obtiene todas las camarillas registradas&#10;    public List&lt;Clique&gt; findAll() {&#10;        return cliqueRepository.findAll();&#10;    }&#10;&#10;    // Busca una camarilla por su id&#10;    public Optional&lt;Clique&gt; findById(Long id) {&#10;        return cliqueRepository.findById(id);&#10;    }&#10;&#10;    // Guarda o actualiza una camarilla&#10;    public Clique save(Clique clique) {&#10;        return cliqueRepository.save(clique);&#10;    }&#10;&#10;    // Elimina una camarilla por su id&#10;    public void deleteById(Long id) {&#10;        cliqueRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/ComercianteService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/ComercianteService.java" />
              <option name="originalContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Comerciante;&#10;import com.trabajo.parcial.repository.ComercianteRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class ComercianteService {&#10;    private final ComercianteRepository comercianteRepository;&#10;&#10;    public ComercianteService(ComercianteRepository comercianteRepository) {&#10;        this.comercianteRepository = comercianteRepository;&#10;    }&#10;&#10;    public List&lt;Comerciante&gt; findAll() {&#10;        return comercianteRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;Comerciante&gt; findById(Long id) {&#10;        return comercianteRepository.findById(id);&#10;    }&#10;&#10;    public Comerciante save(Comerciante comerciante) {&#10;        return comercianteRepository.save(comerciante);&#10;    }&#10;&#10;    public void deleteById(Long id) {&#10;        comercianteRepository.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Comerciante;&#10;import com.trabajo.parcial.repository.ComercianteRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;// Servicio para la gestión de comerciantes&#10;@Service&#10;public class ComercianteService {&#10;    // Repositorio JPA para acceder a los datos de Comerciante&#10;    private final ComercianteRepository comercianteRepository;&#10;&#10;    // Constructor con inyección de dependencias&#10;    public ComercianteService(ComercianteRepository comercianteRepository) {&#10;        this.comercianteRepository = comercianteRepository;&#10;    }&#10;&#10;    // Obtiene todos los comerciantes registrados&#10;    public List&lt;Comerciante&gt; findAll() {&#10;        return comercianteRepository.findAll();&#10;    }&#10;&#10;    // Busca un comerciante por su id&#10;    public Optional&lt;Comerciante&gt; findById(Long id) {&#10;        return comercianteRepository.findById(id);&#10;    }&#10;&#10;    // Guarda o actualiza un comerciante&#10;    public Comerciante save(Comerciante comerciante) {&#10;        return comercianteRepository.save(comerciante);&#10;    }&#10;&#10;    // Elimina un comerciante por su id&#10;    public void deleteById(Long id) {&#10;        comercianteRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/MonitorEstadoAnimoService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/MonitorEstadoAnimoService.java" />
              <option name="originalContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.MonitorEstadoAnimo;&#10;import com.trabajo.parcial.repository.MonitorEstadoAnimoRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class MonitorEstadoAnimoService {&#10;    private final MonitorEstadoAnimoRepository monitorEstadoAnimoRepository;&#10;&#10;    public MonitorEstadoAnimoService(MonitorEstadoAnimoRepository monitorEstadoAnimoRepository) {&#10;        this.monitorEstadoAnimoRepository = monitorEstadoAnimoRepository;&#10;    }&#10;&#10;    public List&lt;MonitorEstadoAnimo&gt; findAll() {&#10;        return monitorEstadoAnimoRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;MonitorEstadoAnimo&gt; findById(Long id) {&#10;        return monitorEstadoAnimoRepository.findById(id);&#10;    }&#10;&#10;    public MonitorEstadoAnimo save(MonitorEstadoAnimo monitorEstadoAnimo) {&#10;        return monitorEstadoAnimoRepository.save(monitorEstadoAnimo);&#10;    }&#10;&#10;    public void deleteById(Long id) {&#10;        monitorEstadoAnimoRepository.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.MonitorEstadoAnimo;&#10;import com.trabajo.parcial.repository.MonitorEstadoAnimoRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;// Servicio para la gestión de registros de estado de ánimo&#10;@Service&#10;public class MonitorEstadoAnimoService {&#10;    // Repositorio JPA para acceder a los datos de MonitorEstadoAnimo&#10;    private final MonitorEstadoAnimoRepository monitorEstadoAnimoRepository;&#10;&#10;    // Constructor con inyección de dependencias&#10;    public MonitorEstadoAnimoService(MonitorEstadoAnimoRepository monitorEstadoAnimoRepository) {&#10;        this.monitorEstadoAnimoRepository = monitorEstadoAnimoRepository;&#10;    }&#10;&#10;    // Obtiene todos los registros de estado de ánimo&#10;    public List&lt;MonitorEstadoAnimo&gt; findAll() {&#10;        return monitorEstadoAnimoRepository.findAll();&#10;    }&#10;&#10;    // Busca un registro de estado de ánimo por su id&#10;    public Optional&lt;MonitorEstadoAnimo&gt; findById(Long id) {&#10;        return monitorEstadoAnimoRepository.findById(id);&#10;    }&#10;&#10;    // Guarda o actualiza un registro de estado de ánimo&#10;    public MonitorEstadoAnimo save(MonitorEstadoAnimo monitorEstadoAnimo) {&#10;        return monitorEstadoAnimoRepository.save(monitorEstadoAnimo);&#10;    }&#10;&#10;    // Elimina un registro de estado de ánimo por su id&#10;    public void deleteById(Long id) {&#10;        monitorEstadoAnimoRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/MultimediaService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/MultimediaService.java" />
              <option name="originalContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Multimedia;&#10;import com.trabajo.parcial.repository.MultimediaRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class MultimediaService {&#10;    private final MultimediaRepository multimediaRepository;&#10;&#10;    public MultimediaService(MultimediaRepository multimediaRepository) {&#10;        this.multimediaRepository = multimediaRepository;&#10;    }&#10;&#10;    public List&lt;Multimedia&gt; findAll() {&#10;        return multimediaRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;Multimedia&gt; findById(Long id) {&#10;        return multimediaRepository.findById(id);&#10;    }&#10;&#10;    public Multimedia save(Multimedia multimedia) {&#10;        return multimediaRepository.save(multimedia);&#10;    }&#10;&#10;    public void deleteById(Long id) {&#10;        multimediaRepository.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.Multimedia;&#10;import com.trabajo.parcial.repository.MultimediaRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;// Servicio para la gestión de registros multimedia&#10;@Service&#10;public class MultimediaService {&#10;    // Repositorio JPA para acceder a los datos de Multimedia&#10;    private final MultimediaRepository multimediaRepository;&#10;&#10;    // Constructor con inyección de dependencias&#10;    public MultimediaService(MultimediaRepository multimediaRepository) {&#10;        this.multimediaRepository = multimediaRepository;&#10;    }&#10;&#10;    // Obtiene todos los registros multimedia&#10;    public List&lt;Multimedia&gt; findAll() {&#10;        return multimediaRepository.findAll();&#10;    }&#10;&#10;    // Busca un registro multimedia por su id&#10;    public Optional&lt;Multimedia&gt; findById(Long id) {&#10;        return multimediaRepository.findById(id);&#10;    }&#10;&#10;    // Guarda o actualiza un registro multimedia&#10;    public Multimedia save(Multimedia multimedia) {&#10;        return multimediaRepository.save(multimedia);&#10;    }&#10;&#10;    // Elimina un registro multimedia por su id&#10;    public void deleteById(Long id) {&#10;        multimediaRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
<<<<<<< HEAD
=======
        <entry key="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/PlanVenganzaService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/trabajo/parcial/service/PlanVenganzaService.java" />
              <option name="originalContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.PlanVenganza;&#10;import com.trabajo.parcial.repository.PlanVenganzaRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class PlanVenganzaService {&#10;    private final PlanVenganzaRepository planVenganzaRepository;&#10;&#10;    public PlanVenganzaService(PlanVenganzaRepository planVenganzaRepository) {&#10;        this.planVenganzaRepository = planVenganzaRepository;&#10;    }&#10;&#10;    public List&lt;PlanVenganza&gt; findAll() {&#10;        return planVenganzaRepository.findAll();&#10;    }&#10;&#10;    public Optional&lt;PlanVenganza&gt; findById(Long id) {&#10;        return planVenganzaRepository.findById(id);&#10;    }&#10;&#10;    public PlanVenganza save(PlanVenganza planVenganza) {&#10;        return planVenganzaRepository.save(planVenganza);&#10;    }&#10;&#10;    public void deleteById(Long id) {&#10;        planVenganzaRepository.deleteById(id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.trabajo.parcial.service;&#10;&#10;import com.trabajo.parcial.model.PlanVenganza;&#10;import com.trabajo.parcial.repository.PlanVenganzaRepository;&#10;import org.springframework.stereotype.Service;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;// Servicio para la gestión de planes de venganza&#10;@Service&#10;public class PlanVenganzaService {&#10;    // Repositorio JPA para acceder a los datos de PlanVenganza&#10;    private final PlanVenganzaRepository planVenganzaRepository;&#10;&#10;    // Constructor con inyección de dependencias&#10;    public PlanVenganzaService(PlanVenganzaRepository planVenganzaRepository) {&#10;        this.planVenganzaRepository = planVenganzaRepository;&#10;    }&#10;&#10;    // Obtiene todos los planes de venganza registrados&#10;    public List&lt;PlanVenganza&gt; findAll() {&#10;        return planVenganzaRepository.findAll();&#10;    }&#10;&#10;    // Busca un plan de venganza por su id&#10;    public Optional&lt;PlanVenganza&gt; findById(Long id) {&#10;        return planVenganzaRepository.findById(id);&#10;    }&#10;&#10;    // Guarda o actualiza un plan de venganza&#10;    public PlanVenganza save(PlanVenganza planVenganza) {&#10;        return planVenganzaRepository.save(planVenganza);&#10;    }&#10;&#10;    // Elimina un plan de venganza por su id&#10;    public void deleteById(Long id) {&#10;        planVenganzaRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
>>>>>>> 9c2940cace0ccc1995eb759a7180430d698bcd81
      </map>
    </option>
  </component>
</project>